import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'miniMaxSum' function below.
     *
     * The function accepts INTEGER_ARRAY arr as parameter.
     */

    public static void miniMaxSum(List<Integer> arr) {
    // Write your code here
        int min = 1000000000;
        int max = 1;
        long minSum = 0;
        long maxSum = 0;
        for (int i = 0; i < arr.size(); i++){
            if (arr.get(i) < min){
                min = arr.get(i);
            }
            else if (arr.get(i) > max){
                max = arr.get(i);
            }
            else{
                continue;
            }
        }
        int flagMin = 0;
        int flagMax = 0;
        for (int w = 0; w < arr.size(); w++){
            if (arr.get(w) == min && flagMin == 0){
                minSum = minSum + arr.get(w);
                flagMin = 1;
                continue;
            }
            else if (arr.get(w) == max && flagMax == 0){
                maxSum = maxSum + arr.get(w);
                flagMax = 1;
                continue;
            }
            else{
                minSum = minSum + arr.get(w);
                maxSum = maxSum + arr.get(w);
            }
        }
        System.out.println(minSum + " " + maxSum);
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));

        List<Integer> arr = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        Result.miniMaxSum(arr);

        bufferedReader.close();
    }
}
